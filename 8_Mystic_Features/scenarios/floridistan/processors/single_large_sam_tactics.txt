# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# New file created by AFSIM-Wizard

processor SINGLE_LARGE_SAM_TACTICS WSF_TASK_PROCESSOR 

   script_variables 
      double launchRange    = 20.0 * MATH.M_PER_NM();
      double re_evaluate    = 60.0;
      string re_engage_time = "re-engage time";
      string weaponName     = "sam";
   end_script_variables
   
   script void announce(string sState)
      writeln("");
      writeln(PLATFORM.Name(), " has entered state ", sState
              , " at time ", TIME_NOW);
      writeln(" the target is ", TRACK.TargetName());
   end_script
   
   evaluation_interval DETECTED 10 s
   evaluation_interval ENGAGE   10 s
   evaluation_interval WAIT     10 s
   evaluation_interval IGNORE   24 h
   
   state DETECTED
      on_entry 
         announce("DETECTED");
      end_on_entry
      
      next_state IGNORE
         return (TRACK.TargetType() != "BOMBER");
      end_next_state
      
      next_state ENGAGE
         return (PLATFORM.GroundRangeTo(TRACK) < launchRange);
      end_next_state
   end_state
   
   state ENGAGE
      next_state IGNORE
         WsfWeapon sam = PLATFORM.Weapon(weaponName);
         if (sam.IsValid())
         {
            if (sam.QuantityRemaining() > 0)
            {
               return false;
            } // quantity > 0
         } // is valid
         return true;
      end_next_state
      
      next_state WAIT
         return Fire(TRACK, "", weaponName, 2, PLATFORM);
      end_next_state
   end_state
   
   state WAIT
      on_entry 
         // set the time to re-evaluate the shot
         double whenToEvaluate = TIME_NOW + re_evaluate;
         // attach it to the track
         TRACK.SetAuxData(re_engage_time, whenToEvaluate);
      end_on_entry
      
      next_state ENGAGE
         if (TRACK.AuxDataDouble(re_engage_time) <= TIME_NOW)
         {
            double whenToEvaluate = TIME_NOW + re_evaluate;
            TRACK.SetAuxData(re_engage_time, whenToEvaluate);
            if ( (TRACK.Target().IsValid()) &&
                 (PLATFORM.GroundRangeTo(TRACK) < launchRange) )
            {
               return true;
            } // still valid and within range
         } // re-evaluate time
         
         return false; // don't re-engage yet
      end_next_state
   end_state
   
   state IGNORE
      on_entry 
         announce ("IGNORE");
      end_on_entry
   end_state
end_processor