# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# File generated by Wizard 2.8.0 on Feb 21, 2021.

processor BOMBER_WEAPON_RELEASE WSF_SCRIPT_PROCESSOR

   script_variables
      string weaponName = "red_gps_bomb_1";
      string LARmeters = "lar_meters";
      Array<bool> tgt_engaged = Array<bool>();
   end_script_variables
   
   on_initialize2
      for (int i = 0; i < PLATFORM.MasterTrackList().Count(); i = i + 1)
      {
         tgt_engaged[i] = false;
      } // for loop
   end_on_initialize2
   
   script bool fireWeapon (WsfTrack tTrack, string tWpn)
      bool shot = false;
      
      WsfWeapon tempWeapon = PLATFORM.Weapon(tWpn);
      if (tempWeapon.IsValid() && tempWeapon.AuxDataDouble(LARmeters))
      {
         double tempRange = tempWeapon.AuxDataDouble(LARmeters);
         if (PLATFORM.GroundRangeTo(tTrack) < tempRange    // Within range
             && tempWeapon.QuantityRemaining() > 0         // Weapons remaining
             && PLATFORM.Altitude() >= 7620)               // Above 25,000 ft
             {
                shot = tempWeapon.FireSalvo(tTrack, 2);
             } // Firing Parameters
      } // Validity Checks
   
      if (shot)
      {
         writeln(PLATFORM.Name(), " fired ", tWpn, " at ",
                 tTrack.TargetName(), " at time ", TIME_NOW);
      }
   
      return shot;
   end_script
   
   update_interval 3.0 s
   on_update
      for (int i = 0; i < PLATFORM.MasterTrackList().Count(); i += 1)
      {
         if ( !tgt_engaged[i])
         {
            WsfTrack tempTrack = PLATFORM.MasterTrackList().TrackEntry(i);
            if (fireWeapon(tempTrack, weaponName))
            {
               tgt_engaged[i] = true;
            } // fired weapon
         } // not engaged
      } // for loop
   end_on_update
   
end_processor





















