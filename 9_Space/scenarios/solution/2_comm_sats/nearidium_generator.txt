# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# New file created by AFSIM Wizard using the Constellation Maker
/*
{
    "Anomaly Alias": 15,
    "Constellation Name": "nearidium",
    "Inclination": 85,
    "Initial Anomaly": 0,
    "Initial RAAN": 0,
    "Number of Planes": 6,
    "Path to generated files": "./",
    "Platform Type": "NEARIDIUM",
    "RAAN Range": 180,
    "Revs. Per Day": 15,
    "Satellites per Plane": 12
}
*/

# DO NOT MODIFY - This block is automatically generated by the Constellation Maker.
#                 It may be overwritten.
script_variables
   string cmBaseName        = "nearidium";
   string cmPlatformType    = "NEARIDIUM";
   string cmOutputPath      = "./";
   double cmRevsPerDay      = 15;
   double cmInclination     = 85;
   int    cmNumPlanes       = 6;
   int    cmNumSatsPerPlane = 12;
   double cmInitialRAAN     = 0;
   double cmRAAN_Range      = 180;
   double cmInitialAnomaly  = 0;
   double cmAnomalyAlias    = 15;
end_script_variables

# DO NOT MODIFY - changes will be overwritten
# Generate the platform name for a given satellite
script string GenerateName(int aPlane, int aSat)
   return cmBaseName + "_" + (string)aPlane + "_" + (string)aSat;
end_script

# DO NOT MODIFY - changes will be overwritten
# Return the number of the next satellite in a plane, wrapping around as needed.
script int NextSatInPlane(int aSat)
   int retval = aSat + 1;
   if (retval == cmNumSatsPerPlane)
   {
      retval = 0;
   }
   return retval;
end_script

# DO NOT MODIFY - changes will be overwritten
# Return the number of the previous satellite in a plane, wrapping around as needed.
script int PrevSatInPlane(int aSat)
   int retval = aSat - 1;
   if (retval < 0)
   {
      retval = cmNumSatsPerPlane - 1;
   }
   return retval;
end_script

# YOUR SCRIPTS HERE - content between these two markers will not be overwritten
#                     by the Constellation Maker
# YOUR SCRIPTS HERE - content between these two markers will not be overwritten
#                     by the Constellation Maker

# YOUR MODIFICATIONS HERE
# This script is called during constellation generation to allow customization of
# the platforms that compose the constellation. Do not change the signature or the
# name of this script, but the contents can be freely modified.
script void SpecializeMember(FileIO aFile, int aPlane, int aSat)
   string name = GenerateName(aPlane, aSat);
   aFile.Writeln("");
   aFile.Writeln("   comm crosslink");
   
   # YOUR SCRIPT HERE
   string aheadName = GenerateName(aPlane, NextSatInPlane(aSat));
   aFile.Writeln("      link " + aheadName + " crosslink");
   string behindName = GenerateName(aPlane, PrevSatInPlane(aSat));
   aFile.Writeln("      link " + behindName + " crosslink");
   
   if (aPlane != cmNumPlanes - 1)
   {
      string aheadRight = GenerateName(aPlane + 1, aSat);
      aFile.Writeln("      link " + aheadRight + " crosslink");
      string behindRight = GenerateName(aPlane + 1, PrevSatInPlane(aSat));
      aFile.Writeln("      link " + behindRight + " crosslink");
   }
   
   if (aPlane > 0)
   {
      string aheadLeft = GenerateName(aPlane - 1, NextSatInPlane(aSat));
      aFile.Writeln("      link " + aheadLeft + " crosslink");
      string behindLeft = GenerateName(aPlane - 1, aSat);
      aFile.Writeln("      link " + behindLeft + " crosslink");
   }
   
   aFile.Writeln("   end_comm");
   aFile.Writeln("");
end_script

# DO NOT MODIFY - any changes may be overwritten
execute at_time 1 sec absolute
   string fileName = cmOutputPath + "/" + cmBaseName + "_autogen.txt";
   FileIO file = {};
   file.Open(fileName, "out");
   
   file.Writeln("# New file created by .//nearidium_generator.txt.");
   file.Writeln("# Modifications to this file may be overwritten.");
   file.Writeln("");
   
   for (int plane = 0; plane < cmNumPlanes; plane += 1)
   {
      double raan = cmInitialRAAN + plane * cmRAAN_Range / cmNumPlanes;
      raan = MATH.NormalizeAngle0_360(raan);
      for (int sat = 0; sat < cmNumSatsPerPlane; sat += 1)
      {
         double anomaly = cmInitialAnomaly + sat * 360.0 / cmNumSatsPerPlane + cmAnomalyAlias * plane;
         anomaly = MATH.NormalizeAngle0_360(anomaly);
         string name = GenerateName(plane, sat);
         
         file.Writeln("platform " + name + " " + cmPlatformType);
         file.Writeln("   mover");
         file.Writeln("      inclination " + (string)cmInclination + " deg");
         file.Writeln("      revs_per_day " + (string)cmRevsPerDay);
         file.Writeln("      raan " + (string)raan + " deg");
         file.Writeln("      true_anomaly " + (string)anomaly + " deg");
         file.Writeln("   end_mover");
         SpecializeMember(file, plane, sat);
         file.Writeln("end_platform");
         file.Writeln("");
      }
   }
   
   file.Close();
end_execute
