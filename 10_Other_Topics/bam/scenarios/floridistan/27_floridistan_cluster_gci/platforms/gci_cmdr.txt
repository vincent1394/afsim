# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# New file created by AFSIM Wizard

include_once processors/quantum_agents/aigci/gci_quantum_tasker.txt

platform_type GCI_CMDR WSF_PLATFORM
   icon C4I

   infrared_signature    VEHICLE_INFRARED_SIGNATURE
   optical_signature     VEHICLE_OPTICAL_SIGNATURE
   radar_signature       VEHICLE_RADAR_SIGNATURE

   comm blue_comm TEAM_DATALINK
      network_name blue_net
      internal_link data_mgr
      internal_link task_mgr
      internal_link perception
   end_comm

   processor data_mgr WSF_TRACK_PROCESSOR
      purge_interval            60 sec
      fused_track_reporting     on
      raw_track_reporting       off
      report_interval           1 sec
      circular_report_rejection on
      report_to command_chain blue_chain commander via blue_comm
      report_to command_chain blue_chain subordinates via blue_comm
   end_processor

   processor  task_mgr  GCI_QUANTUM_TASKER
   
      #behavior_tree 
      #   behavior_node  draw_master_track_list
      #end_behavior_tree
   
      #script_debug_writes on
     
#      script_variables
#         mClusterDistanceLimit = 30*MATH.M_PER_NM();
#         WsfDraw mDraw = WsfDraw();
#      end_script_variables
#      execute at_interval_of 10 sec 
#         mDraw.SetColor(0.0, 1.0, 0.0);
#         mDraw.SetDuration(10.0);
#         foreach(WsfTask task in PROCESSOR.TasksReceived())
#         {
#            WsfTrack track = PLATFORM.MasterTrackList().Find(task.LocalTrackId());
#            if (track.IsValid())
#            {
#               WsfPlatform plat = WsfSimulation.FindPlatform(track.TargetIndex());
#               if (plat.IsValid())
#               {
#                  mDraw.BeginLines();
#                     mDraw.Vertex(PLATFORM);
#                     mDraw.Vertex(plat);
#                  mDraw.End();
#               }
#            }
#         }
#      end_execute
   end_processor

   processor perception WSF_PERCEPTION_PROCESSOR
      script_debug_writes      off
      reporting_self           false
      reporting_others         false
      asset_perception         status_messages
      asset_update_interval     5 sec
      max_asset_load          100
      threat_update_interval    5 sec
      max_threat_load         100
      
#      update_interval 10 sec
#      on_update
#         Array<WsfAssetPerception> assets = PROCESSOR.PerceivedAssets();
#         if (assets.Size() > 0)
#         {
#            writeln_d("T=",TIME_NOW, ", assets for ", PLATFORM.Name(), " : ");
#            foreach (WsfAssetPerception p in assets) {
#               writeln_d("asset index: ", p.Index(), ", name: ", WsfSimulation.FindPlatform(p.Index()).Name());
#            }
#            writeln_d("");
#         }
#      end_on_update      
   end_processor
end_platform_type
