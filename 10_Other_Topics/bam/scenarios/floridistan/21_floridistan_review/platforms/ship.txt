# ****************************************************************************
# CUI
#
# The Advanced Framework for Simulation, Integration, and Modeling (AFSIM)
#
# The use, dissemination or disclosure of data in this file is subject to
# limitation or restriction. See accompanying README and LICENSE for details.
# ****************************************************************************

# -------------------------------------------------------------------------
#      note: this JAMMER_LEAD_TASKER processor is only useful when on a
#      commander platform that commands over SOJ type platforms
#      see note in header of soj.txt for more info
# -------------------------------------------------------------------------

processor JAMMER_LEAD_TASKER WSF_QUANTUM_TASKER_PROCESSOR

   // Script to determine the appropriate jammer type based on frequency
   script string JammerType(double aFrequency)
      string jammerType = "";
      if (aFrequency < 500.e6)
      {
         jammerType = "SOJ_VHF_JAMMER";
      }
      if ((aFrequency > 2000.e6) &&
          (aFrequency < 4000.e6))
      {
         jammerType = "SOJ_SBAND_JAMMER";
      }
      else if (aFrequency > 8000.e6)
      {
         jammerType = "SOJ_XBAND_JAMMER";
      }
      return jammerType;
   end_script

   script Array<WsfQuantumTask> JammerTaskGeneration (Array<WsfLocalTrack> TRACKS, Array<WsfAssetPerception> ASSETS )
      Array<WsfQuantumTask> tasks = Array<WsfQuantumTask>();
      // create jammer tasks for enemy tracks
      for (int i=0; i<TRACKS.Size(); i=i+1)
      {
         WsfLocalTrack lt = TRACKS.Get(i);
         if (lt.IsValid() && 
             (!lt.SideValid() || lt.Side() != PLATFORM.Side()) &&
             lt.SignalCount() > 0)
         {
            WsfQuantumTask task = WsfQuantumTask.Construct(1.0, "JAMMER", lt);
            task.SetTaskType("JAMMER");
            task.SetAuxData("freq", lt.SignalFrequency(0));
            tasks.PushBack(task);
            writeln_d("jammer task generated for: ", lt.TargetName(), ", updated time: ", lt.UpdateTime());
         }
      }
      return tasks;
   end_script 
   
   script double JammerTaskEvaluation ( WsfQuantumTask aTask, WsfAssetPerception ASSET)
      // TODO - include missile capability in evaluation
      //       for now: just base value on range & whether or not asset as domain capable weapon
      WsfTrack track = PLATFORM.MasterTrackList().FindTrack(aTask.TrackId());

      if (aTask.TaskType() == "JAMMER" && aTask.ResourceIsJammer() && track.IsValid())
      {
         // TODO - select one of the systems? or let quantum tasker do it?  expect asset rep type: resources ? yes
         for (int i=0; i<ASSET.SystemCount(); i+=1)
         {
            if (ASSET.SystemKind(i) == "jammer")
            {
               double freq = aTask.AuxDataDouble("freq");
               string requiredType = JammerType(freq);
               #writeln("track ", track.TargetName(),", frequency ", freq, ", required type: ", requiredType);
               if (requiredType == ASSET.SystemType(i))
               {
                  // it's possible that this jammer asset can jam this task's target
                  if (track.LocationValid())
                  {
                     return (1.0 / track.SlantRangeTo(ASSET.Location()));
                  }
                  else if (track.Target().IsValid())
                  {
                     return (1.0 / track.Target().SlantRangeTo(ASSET.Location()));
                  }
               }
            }
         }
      }
      return 0;
   end_script
end_processor

radar_signature SHIP_RADAR_SIGNATURE
   constant 100 m^2
end_radar_signature

platform_type SHIP WSF_PLATFORM
   side red 
   icon Carrier
   radar_signature SHIP_RADAR_SIGNATURE

   mover WSF_SURFACE_MOVER 
   end_mover
  
   comm blue_comm TEAM_DATALINK
      network_name blue_net
      internal_link data_mgr
   end_comm

   processor data_mgr WSF_TRACK_PROCESSOR
      purge_interval             60    seconds
      report_to command_chain blue_chain commander via blue_comm
      report_to command_chain blue_chain subordinates via blue_comm
      report_interval            4 sec
      fused_track_reporting      off
      raw_track_reporting        on
      circular_report_rejection  true
   end_processor
end_platform_type

route ship_patrol
  label start
     offset  20   0 km speed 30 kts 
        radial_acceleration 1 g
     offset  20   5 km speed 30 kts 
        radial_acceleration 1 g
     offset  0    5 km speed 30 kts 
        radial_acceleration 1 g
     offset  0    0 km speed 30 kts 
        radial_acceleration 1 g
   goto start
end_route
